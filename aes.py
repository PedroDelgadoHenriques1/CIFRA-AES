import binascii


# Tamanho da chave
SIZE_16 = 16
SIZE_24 = 24
SIZE_32 = 32

# S-Box and inverse S-Box
sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]


rsbox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0x8e, 0x29, 0x75, 0x79, 0x87, 0x1c, 0x64, 0x86, 0x4c, 0x07,
    0x77, 0x6f, 0x60, 0x7f, 0xa3, 0x77, 0xa1, 0x0f, 0xb6, 0x1b, 0x27, 0xa4, 0xd1, 0x53, 0x2e, 0xc2,
    0x58, 0xc3, 0x45, 0xe9, 0xb1, 0x2d, 0x99, 0x0c, 0xb3, 0x1a, 0xe8, 0x1b, 0x4d, 0x3b, 0xe6, 0xc7,
    0x8f, 0xc5, 0xd0, 0x7e, 0x27, 0x7c, 0x1f, 0x0b, 0x1a, 0xf5, 0xb8, 0x4c, 0xe7, 0xf5, 0x36, 0xc4,
    0x82, 0xc9, 0x25, 0xc7, 0x3d, 0xc6, 0x20, 0x16, 0xf7, 0xd3, 0xd5, 0x7f, 0x83, 0x15, 0x49, 0x7a,
    0x24, 0x1b, 0x25, 0xb7, 0xe7, 0xe3, 0x70, 0xb3, 0x56, 0xe2, 0xe2, 0x8d, 0x69, 0x2d, 0x98, 0x5f,
    0xf2, 0x58, 0xb7, 0x82, 0x66, 0x3f, 0x70, 0xd2, 0xd3, 0xc4, 0x4b, 0xc0, 0x44, 0xd6, 0x69, 0x68,
    0xb0, 0x53, 0x0b, 0x8a, 0xa1, 0x1b, 0x66, 0x69, 0x50, 0x82, 0xd3, 0x1c, 0xb6, 0x2b, 0xe2, 0xa1,
    0x0c, 0xb0, 0x7a, 0x6e, 0x9d, 0x3b, 0x78, 0x26, 0x8b, 0xe5, 0xe4, 0x1b, 0x90, 0x73, 0x4b, 0x04,
    0xc3, 0xc8, 0x82, 0x0f, 0xd9, 0xd5, 0x79, 0xb0, 0x58, 0xc1, 0xa0, 0xc8, 0x72, 0x2c, 0xb3, 0x4d,
    0x71, 0xb5, 0xb8, 0x19, 0xe4, 0x5a, 0x05, 0x87, 0x38, 0xa4, 0x09, 0xf5, 0x92, 0x2d, 0xc7, 0xb3,
    0xe8, 0x80, 0x56, 0xc6, 0x36, 0x8e, 0x73, 0xe4, 0xf5, 0x8b, 0x09, 0xb3, 0xd9, 0x1e, 0x72, 0xe4,
    0x07, 0xe1, 0x05, 0x61, 0x0d, 0x9b, 0xa2, 0x51, 0x6b, 0x47, 0x93, 0x08, 0x65, 0x2f, 0xf3, 0xd2,
]

# Rcon (Round Constant)
Rcon = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
]





# Função para converter strings HEX em bytes
def hex_string_to_bytes(hex_string):
    return binascii.unhexlify(hex_string)

# Getter da S-BOX
def get_sbox_value(num):
    return sbox[num]

# Getter da S-BOX invertida
def get_sbox_invert(num):
    return rsbox[num]

# Rotaciona a palavra 8 bits para à esquerda
def rotate(word):
    return word[1:] + word[:1]

# Getter da tabela de R-CON
def get_rcon_value(num):
    return Rcon[num]

def core(word, iteration):
    word = rotate(word)
    word = [get_sbox_value(b) for b in word]
    word[0] ^= get_rcon_value(iteration)
    return word

# Expande uma chave de 128, 192, 256 bytes
def expand_key(key, size):
    expanded_key = list(key)
    current_size = len(key)
    rcon_iteration = 1

    while current_size < (16 * (nbrRounds + 1)):
        t = expanded_key[-4:]

        if current_size % size == 0:
            t = core(t, rcon_iteration)
            rcon_iteration += 1

        if size == SIZE_32 and (current_size % size == 16):
            t = [get_sbox_value(b) for b in t]

        for i in range(4):
            expanded_key.append(expanded_key[current_size - size] ^ t[i])
            current_size += 1

    return expanded_key

def sub_bytes(state):
    return [get_sbox_value(b) for b in state]

def shift_rows(state):
    for i in range(4):
        state[i*4:i*4+4] = state[i*4:i*4+4][i:] + state[i*4:i*4+4][:i]

def add_round_key(state, round_key):
    return [state[i] ^ round_key[i] for i in range(16)]

def galois_multiplication(a, b):
    p = 0
    for counter in range(8):
        if (b & 1) == 1:
            p ^= a
        hi_bit_set = (a & 0x80)
        a <<= 1
        if hi_bit_set == 0x80:
            a ^= 0x1b
        b >>= 1
    return p

def mix_columns(state):
    for i in range(4):
        column = state[i::4]
        mixed_column = mix_column(column)
        for j in range(4):
            state[i * 4 + j] = mixed_column[j]

def mix_column(column):
    cpy = column[:]
    return [
        galois_multiplication(cpy[0], 2) ^ galois_multiplication(cpy[3], 1) ^ galois_multiplication(cpy[2], 1) ^ galois_multiplication(cpy[1], 3),
        galois_multiplication(cpy[1], 2) ^ galois_multiplication(cpy[0], 1) ^ galois_multiplication(cpy[3], 1) ^ galois_multiplication(cpy[2], 3),
        galois_multiplication(cpy[2], 2) ^ galois_multiplication(cpy[1], 1) ^ galois_multiplication(cpy[0], 1) ^ galois_multiplication(cpy[3], 3),
        galois_multiplication(cpy[3], 2) ^ galois_multiplication(cpy[2], 1) ^ galois_multiplication(cpy[1], 1) ^ galois_multiplication(cpy[0], 3)
    ]

def aes_round(state, round_key):
    print("\nChave da rodada:")
    print(" ".join(f"{b:02x}" for b in round_key))

    print("\nEstado inicial:")
    print(" ".join(f"{b:02x}" for b in state))

    state = sub_bytes(state)
    print("\nApós SubBytes:")
    print(" ".join(f"{b:02x}" for b in state))

    shift_rows(state)
    print("\nApós ShiftRows:")
    print(" ".join(f"{b:02x}" for b in state))

    mix_columns(state)
    print("\nApós MixColumns:")
    print(" ".join(f"{b:02x}" for b in state))

    state = add_round_key(state, round_key)
    print("\nApós a RoundKey:")
    print(" ".join(f"{b:02x}" for b in state))

    return state

def create_round_key(expanded_key, round_key):
    for i in range(4):
        for j in range(4):
            round_key[i + (j * 4)] = expanded_key[i * 4 + j]

def aes_main(state, expanded_key, nbr_rounds):
    round_key = [0] * 16
    create_round_key(expanded_key, round_key)
    state = add_round_key(state, round_key)

    for i in range(1, nbr_rounds):
        print(f"\n========Rodada {i}========")
        create_round_key(expanded_key[16 * i:], round_key)
        state = aes_round(state, round_key)
        print(f"\n========Fim da rodada {i}========")

    create_round_key(expanded_key[16 * nbr_rounds:], round_key)
    state = sub_bytes(state)
    shift_rows(state)
    state = add_round_key(state, round_key)

    return state

def aes_encrypt(input_data, key, size):
    global nbrRounds
    if size == SIZE_16:
        nbrRounds = 10
    elif size == SIZE_24:
        nbrRounds = 12
    elif size == SIZE_32:
        nbrRounds = 14
    else:
        raise ValueError("Unknown key size")

    expanded_key = expand_key(key, size)
    output = aes_main(input_data, expanded_key, nbrRounds)
    return output

# Exemplo de uso
if __name__ == "__main__":
    hex_key = "0f1571c947d9e8590cb7add6af7f6798"
    hex_plain_text = "0123456789abcdeffedcba9876543210"

    key = hex_string_to_bytes(hex_key)
    plaintext = hex_string_to_bytes(hex_plain_text)

    print("\nTexto plano (HEX):")
    print(" ".join(f"{b:02x}" for b in plaintext))

    ciphertext = aes_encrypt(plaintext, key, SIZE_16)

    print("\nTexto cifrado (HEX):")
    print(" ".join(f"{b:02x}" for b in ciphertext))


